# Load data
Tree_NO <- 1:10
Actual_Weight <- c(59, 47, 52, 60, 67, 48, 44, 58, 76, 58)
Estimated_Weight <- c(61, 42, 50, 58, 67, 45, 39, 57, 71, 53)
# Calculate population total of estimated weights
x_total <- 1160
# Create data frame
df <- data.frame(Tree_NO, Actual_Weight, Estimated_Weight)
# Fit regression model
model <- lm(Actual_Weight ~ Estimated_Weight, data = df)
# Summary of regression model
summary(model)
# Predict population total
N <- 200
y_hat <- (coef(model)[2] + coef(model)[1] * (x_total / N)) * N
# Calculate standard error of estimated total
SE_y_hat <- sqrt((N^2 * (N - length(Actual_Weight)) / (length(Actual_Weight) * (N - 1))) * summary(model)$sigma^2)
# Print results
cat("Estimated Population Total:", y_hat, "\n")
cat("Standard Error (S.E):", SE_y_hat, "\n")
#generate example data
set.seed(456)
survival_data <- rweibull(75,shape=1.5,scale=18)
library(MASS)
#fit weibull distribution
fit <- fitdistr(survival_data, densfun = "weibull")
#extract estimate parameters
shape <- fit$estimate["shape"]
scale <- fit$estimate["scale"]
#print parameters
shape
scale
#sample data (20 lifetimes in ours)
data <- c(125,150,170,180,200,220,240,260,280,300,330,360,380,400,420,440,460,480,500,520)
#define parameters for weibull distribution
lambda <- 250 #Scale Parameter
k <- 1.5 #Shape Parameter
#Calculate Mean and Variance
mean <- lambda * gamma(1+1/k)
variance <- (lambda^2)*(gamma(1+2/k)-gamma(1+1/k))^2
#Generate random numbers from te weibull distribution
num_samples <- 1000 #no of samples to generate
weibull_samples <- rweibull(num_samples, shape=k, scale=lambda)
#Calculate Mean and Variance of the generated samples
mean_weibull <- mean(weibull_samples)
variance_weibull <- var(weibull_samples)
#create a histogran
hist(data, breaks=6, prob=TRUE, main="Histograms of lifetimes")
#Print Mean and Variance
cat("Mean :",mean_weibull,"\n")
cat("Variance :",variance_weibull,"\n")
#Truncated Poisson Distribution
lambda <- 5
#Simulate data from the truncated poisson distribution
num_samples <- 1000 # Number of samples to generate
samples <- rpois(num_samples,lambda)
truncated_samples <- samples[samples>0] #Truncated at zero
#Calculate Mean and Variance of the truncated distribution
mean_truncated <- mean(truncated_samples)
variance_truncated <- var(truncated_samples)
#Plot the histogran of the truncated samples
hist(truncated_samples,main="Truncated Poisson Distribution",xlab="Values",ylab="Frequency")
#Print Mean and Variance of the truncated distribution
cat("Mean (Truncated) :",mean_truncated,"\n")
cat("Variance (Truncated) :",variance_truncated,"\n")
set.seed(456)
failure_hmes <- rexp(70,rate=0.1)
library(MASS)
fit <- fitdistr(failure_hmes,densfun = "exponential")
rate <- fit$estimate["rate"]
rate
#Given the parameter (lambda)
lambda <- 0.2
#Calculate Mean(Expected Value)
mean_value <- 1/lambda
mean_value
#Calculate Variance
variance_value <- 1/(lambda^2)
variance_value
#Generate random samples from the exponential distribution
sample_size <- 1000 #You can adjust the sample size
samples <- rexp(sample_size,rate = lambda)
#Create a Histogram
hist(samples,breaks=20,main="Exponential Distribution Histogram")
#set the parameter
#total number of matches
n <- 20
#probability of success in a individual match
p <- 0.6
#lower limit for success
lower_limit <- 10
#Calculate the PMF for success within the lower limit
pmf <- dbinom(lower_limit, size = n, prob = p)
#Calculate the CDF for success within the lower limit
cdf <- pbinom(lower_limit, size = n, prob = p)
#Print the Results
cat("PMF :",pmf,"\n")
cat("CDF :",cdf,"\n")
#Truncated Binomial Distribution
n <- 5 # Number of trails
p <- 1/3 # Probability of success
q <- 1-p # Probability of failure
#Simulate data from the truncated binomial distribution
num_samples <- 1000 # Number of samples to generate
samples <- rbinom(num_samples,n,p)
truncated_samples <- samples[samples>0] #Truncated at zero
#Calculate Mean and Variance of the truncated distribution
mean_truncated <- mean(truncated_samples)
variance_truncated <- var(truncated_samples)
#Plot the histogran of the truncated samples
hist(truncated_samples,main="Truncated Binomial Distribution",xlab="Values",ylab="Frequency")
#Print Mean and Variance of the truncated distribution
cat("Mean (Truncated) :",mean_truncated,"\n")
cat("Variance (Truncated) :",variance_truncated,"\n")
samples
#Truncated Binomial Distribution
n <- 5 # Number of trails
p <- 1/3 # Probability of success
q <- 1-p # Probability of failure
#Simulate data from the truncated binomial distribution
num_samples <- 1000 # Number of samples to generate
samples <- rbinom(num_samples,n,p)
truncated_samples <- samples[samples>0] #Truncated at zero
#Calculate Mean and Variance of the truncated distribution
mean_truncated <- mean(truncated_samples)
variance_truncated <- var(truncated_samples)
#Plot the histogran of the truncated samples
hist(truncated_samples,main="Truncated Binomial Distribution",xlab="Values",ylab="Frequency")
#Print Mean and Variance of the truncated distribution
cat("Mean (Truncated) :",mean_truncated,"\n")
cat("Variance (Truncated) :",variance_truncated,"\n")
#set the parameter
#total number of matches
n <- 20
#probability of success in a individual match
p <- 0.6
#lower limit for success
lower_limit <- 10
#Calculate the PMF for success within the lower limit
pmf <- dbinom(lower_limit, size = n, prob = p)
#Calculate the CDF for success within the lower limit
cdf <- pbinom(lower_limit, size = n, prob = p)
#Print the Results
cat("PMF :",pmf,"\n")
cat("CDF :",cdf,"\n")
#Truncated Binomial Distribution
n <- 5 # Number of trails
p <- 1/3 # Probability of success
q <- 1-p # Probability of failure
#Simulate data from the truncated binomial distribution
num_samples <- 1000 # Number of samples to generate
samples <- rbinom(num_samples,n,p)
truncated_samples <- samples[samples>0] #Truncated at zero
#Calculate Mean and Variance of the truncated distribution
mean_truncated <- mean(truncated_samples)
variance_truncated <- var(truncated_samples)
#Plot the histogran of the truncated samples
hist(truncated_samples,main="Truncated Binomial Distribution",xlab="Values",ylab="Frequency")
#Print Mean and Variance of the truncated distribution
cat("Mean (Truncated) :",mean_truncated,"\n")
cat("Variance (Truncated) :",variance_truncated,"\n")
#Set lambda to 3(max complaints per week)
lambda <- 3
#Generate a sequence of possible complain counts (0-3)
complaint_counts <- 0:3
#Calculate the possibilities for each count using the poisson distribution
probabilities <- dpois(complaint_counts,lambda)
#print the probabilities
print(probabilities)
#Truncated Poisson Distribution
lambda <- 2
#Simulate data from the truncated poisson distribution
num_samples <- 1000 # Number of samples to generate
samples <- rpois(num_samples,lambda)
truncated_samples <- samples[samples>0] #Truncated at zero
#Calculate Mean and Variance of the truncated distribution
mean_truncated <- mean(truncated_samples)
variance_truncated <- var(truncated_samples)
#Plot the histogran of the truncated samples
hist(truncated_samples,main="Truncated Poisson Distribution",xlab="Values",ylab="Frequency")
#Print Mean and Variance of the truncated distribution
cat("Mean (Truncated) :",mean_truncated,"\n")
cat("Variance (Truncated) :",variance_truncated,"\n")
#load the truncnorm package
library(truncnorm)
#Set the paramters
mean_val <-500
sd_val <- 100
lower_limit <- 200
upper_limit <- 800
num_participants <- 80
reaction_times <- rtruncnorm(n=num_participants,a=(lower_limit-mean_val)/sd_val,
b=(upper_limit-mean_val)/sd_val,mean = mean_val,sd = sd_val)
#View the generated reaction times
print(reaction_times)
#Generate a sample dataset
set.seed(456)
sample_data <- rgamma(500,shape=2,rate=0.5)
#Calculate the 7th order statistic
seventh_order_statistic <- sort(sample_data)[7]
#Generate quantiles for the 7th order statistic
quantiles <- qgamma(ppoints(500),shape=2,rate=0.5)
#Plot the distribution of the 7th order statistic
hist(quantiles,breaks=30,col="lightgreen",main="Distribution of 7th order statistic",
xlab="Value")
abline(v=seventh_order_statistic,col="blue",lwd=2)
#Set the number of teams and matches
num_teams <- 50
num_matches_per_team <- 20
#Generate random success rates for each team
success_rates <- runif(num_teams,min=0.2,max=0.8)
#Simulate outcomes for each team using a compound binomial distribution
team_outcomes <- sapply(success_rates,
function(p)rbinom(num_matches_per_team,size=50,prob=p))
#Print the simulated outcomes for the first team
print(team_outcomes[1])
#Print the simulated outcomes for the first team
print(team_outcomes[1])
#Set the parameters
#Average numbr of complaints per week
lambda <- 2
#Maximum number of complaints per week
max_complaints <- 3
#Number of weeks
num_weeks <- 60
#Generate compound poisson distribution
complaints_per_week <- pmin(rpois(num_weeks,lambda),max_complaints)
#Display the results
print(complaints_per_week)
#Set the seed for reproducibility
set.seed(123)
#Generate 80 random reaction times from a normal distribution
reaction_times <- rnorm(80,mean=500,sd=100)
#Ensure the values are within the specified range
reaction_times <- pmax(pmin(reaction_times,800),200)
#Display the generated reaction times
print(reaction_times)
#Generate a sample dataset
set.seed(789)
#Gamma distribution with shape =1.5 , rate=0.2
survival_times <- rgamma(150,shape = 1.5, rate = 0.2)
#Calculate the Hazard rates
hazard_rates <- 0.2
#Calculate Mills Ratio
mills_ratio <- 1 - exp(-hazard_rates*  survival_times)
#Plot the Mills Ratio
hist(mills_ratio, breaks=30, col="lightyellow", main="Mills Ratio Distribution",
xlab="Mills Ratio")
#Generate a sample dataset
set.seed(456)
sample_data <- rgamma(500,shape=2,rate=0.5)
#Calculate the 7th order statistic
seventh_order_statistic <- sort(sample_data)[7]
#Generate quantiles for the 7th order statistic
quantiles <- qgamma(ppoints(500),shape=2,rate=0.5)
#Plot the distribution of the 7th order statistic
hist(quantiles,breaks=30,col="lightgreen",main="Distribution of 7th order statistic",
xlab="Value")
abline(v=seventh_order_statistic,col="blue",lwd=2)
